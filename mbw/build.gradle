apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

repositories {
    google()
    jcenter()
}

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath androidBuildArtifact
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

configurations {
    compile.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    compile.exclude group: 'org.jetbrains', module: 'annotations'
}

kapt {
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

dependencies {
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "com.android.support:support-annotations:$androidSupportVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    implementation project(includePrefix + ':coinapult')
    implementation project(includePrefix + ':walletmodel')
    implementation project(includePrefix + ':wapi')
    implementation project(includePrefix + ':walletcore')
    implementation project(includePrefix + ':trezor')
    implementation project(includePrefix + ':lt-api')
    implementation project(includePrefix + ':mbwlib')
    implementation project(includePrefix + ':btchip')
    implementation project(includePrefix + ':LVL')
    implementation project(includePrefix + ':libs:nordpol')
    implementation project(includePrefix + ':bitlib')
    implementation project(includePrefix + ':view')
    implementation project(includePrefix + ':bitcoincashj:core')

    implementation guavaArtifact
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.code.findbugs:annotations:3.0.1'
    kapt 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation 'com.squareup:otto:1.3.4'
    implementation "com.android.support:appcompat-v7:$androidSupportVersion"
    implementation "com.android.support:support-compat:$androidSupportVersion"
    implementation "com.android.support:support-v4:$androidSupportVersion"
    implementation "com.android.support:animated-vector-drawable:$androidSupportVersion"
    implementation "com.android.support:recyclerview-v7:$androidSupportVersion"
    implementation "com.android.support:gridlayout-v7:$androidSupportVersion"
    implementation "com.android.support:preference-v7:$androidSupportVersion"
    implementation 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    implementation 'com.squareup.wire:wire-runtime:1.6.1'
    implementation 'com.jakewharton:butterknife:8.5.1'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'com.google.protobuf:protobuf-java:3.4.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta5'

    implementation 'com.journeyapps:zxing-android-embedded:3.6.0'

    implementation project(includePrefix + ':wallet-android-modularization-tools:modularization-lib')
    implementation project(includePrefix + ':modulespvcontract')

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
    implementation 'com.github.tony19:logback-android-core:1.1.1-6'
    implementation 'com.google.http-client:google-http-client-jackson2:1.19.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation('org.bitcoinj:orchid:1.2.1') {
        exclude(module: 'slf4j-api')
    }
}

android {
    dataBinding {
        enabled = true
    }
    configurations {
        all*.exclude module: 'jcip-annotations'
        all*.exclude module: 'jsr305'
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
        // bitcoinj brings in a native library for x86_64, which seems to confuse the playstore upload - just strip the file
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
    }

    compileOptions {
        sourceCompatibility = 'VERSION_1_7'
        targetCompatibility = 'VERSION_1_7'
    }

    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidSdkBuildVersion

    defaultConfig {
        versionCode 2120020
        versionName '2.12.0.20'
        multiDexEnabled true

        minSdkVersion 19
        targetSdkVersion 28
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
    }

    signingConfigs {
        release {
            if (project.hasProperty('prodKeyStore') &&
                    project.hasProperty('prodKeyAlias') &&
                    project.hasProperty('prodKeyStorePassword') &&
                    project.hasProperty('prodKeyAliasPassword')) {
                storeFile file('../' + prodKeyStore)
                keyAlias prodKeyAlias
                storePassword prodKeyStorePassword
                keyPassword prodKeyAliasPassword
            } else {
                failIfSigningKeyEnforced()
                storeFile commonDebugKeystore
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
        btctestnet {
            if (project.hasProperty('testKeyStore') &&
                    project.hasProperty('testKeyAlias') &&
                    project.hasProperty('testKeyStorePassword') &&
                    project.hasProperty('testKeyAliasPassword')) {
                storeFile file('../' + testKeyStore)
                keyAlias testKeyAlias
                storePassword testKeyStorePassword
                keyPassword testKeyAliasPassword
            } else {
                failIfSigningKeyEnforced()
                storeFile commonDebugKeystore
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
        commonDebug {
            storeFile commonDebugKeystore
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.commonDebug
            debuggable true
        }
    }
    flavorDimensions "flavor"

    productFlavors {
        prodnet {
            applicationId 'com.mycelium.wallet'
            versionName = defaultConfig.versionName
            signingConfig signingConfigs.release

            ext {
                MTAssetID = "LaA8aiRBha2BcC6PCqMuK8xzZqdA3Lb6VVv41K"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La4aGUPuNKZyC393pS2Nb4RJdk2WvmoaAdrRLZ"
                RMCApiClientURL = "https://rmc-ico.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"https://coloredcoinsd.gear.mycelium.com/v3/", "https://api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"https://coloredcoins.gear.mycelium.com/api/", "https://explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "18c91fJmVg7btPjxpwrhgwd37GkVghq9me"

                ElectrumServers = '{"tcp-tls://electrumx.mycelium.com:4431"}'

                appIdSpvBch = [release: "com.mycelium.module.spvbch",
                               debug  : "com.mycelium.module.spvbch.debug"]
                appIdGeb = [release: "com.modules.tradingbots.getextrabtc",
                            debug  : "com.modules.tradingbots.getextrabtc.debug"]
            }
            logger.info("Signing config is ", signingConfig)
        }
        btctestnet {
            applicationId 'com.mycelium.testnetwallet'
            versionName = defaultConfig.versionName + '-TESTNET'
            signingConfig signingConfigs.btctestnet

            ext {
                MTAssetID = "La3JCiNMGmc74rcfYiBAyTUstFgmGDRDkGGCRM"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La8yFVyKmHGf4KWjcPqATZeTrSxXyzB3JRPxDc"
                RMCApiClientURL = "https://rmc-ico-test.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"http://testnet.api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"http://testnet.explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "mx92L6iuCfxQUz4cLNU4jJpfWbavVHgYj9"

                ElectrumServers = '{"tcp-tls://electrumx-b.mycelium.com:4432"}'

                appIdSpvBch = [release: "com.mycelium.module.spvbch.testnet",
                               debug  : "com.mycelium.module.spvbch.testnet.debug"]
                appIdGeb = [release: "com.modules.tradingbots.getextrabtc.testnet",
                            debug  : "com.modules.tradingbots.getextrabtc.testnet.debug"]
            }
            logger.info("Signing config is ", signingConfig)
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        variant.buildConfigField "String", "MTAssetID", "\"${flavor.ext.MTAssetID}\""
        variant.buildConfigField "String", "MassAssetID", "\"${flavor.ext.MassAssetID}\""
        variant.buildConfigField "String", "RMCAssetID", "\"${flavor.ext.RMCAssetID}\""
        variant.buildConfigField "String", "RMCApiClientURL", "\"${flavor.ext.RMCApiClientURL}\""
        variant.buildConfigField "String[]", "ColoredCoinsApiURLs", "${flavor.ext.ColoredCoinsApiURLs}"
        variant.buildConfigField "String[]", "ColuBlockExplorerApiURLs", "${flavor.ext.ColuBlockExplorerApiURLs}"
        variant.buildConfigField "String", "RMCChangeAddress", "\"${flavor.ext.RMCChangeAddress}\""
        variant.buildConfigField "String[]", "ElectrumServers", "${flavor.ext.ElectrumServers}"
        variant.buildConfigField "String", "appIdSpvBch", "\"${flavor.ext.appIdSpvBch[variant.buildType.name]}\""
        variant.buildConfigField "String", "appIdGeb", "\"${flavor.ext.appIdGeb[variant.buildType.name]}\""
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

apply plugin: 'com.google.gms.google-services'
